// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Planner.Models;
using System;

namespace Planner.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180511104201_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Planner.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Designation");

                    b.Property<DateTime>("End");

                    b.Property<string>("Location");

                    b.Property<string>("MeetingLocation");

                    b.Property<DateTime>("MeetingTime");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Planner.Models.EventRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Designation");

                    b.Property<int?>("QuantityRequired");

                    b.Property<string>("SubDesignation");

                    b.Property<int?>("SubQuantityRequired");

                    b.HasKey("Id");

                    b.ToTable("EventRoles");
                });

            modelBuilder.Entity("Planner.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Designation");

                    b.Property<int?>("EventId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Planner.Models.TeamAffiliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("RoleId");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamAffiliations");
                });

            modelBuilder.Entity("Planner.Models.TeamRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Designation");

                    b.HasKey("Id");

                    b.ToTable("TeamRoles");
                });

            modelBuilder.Entity("Planner.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("EMail");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Planner.Models.Administrator", b =>
                {
                    b.HasBaseType("Planner.Models.User");


                    b.ToTable("Administrator");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("Planner.Models.Event", b =>
                {
                    b.HasOne("Planner.Models.Administrator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Planner.Models.Administrator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("Planner.Models.Team", b =>
                {
                    b.HasOne("Planner.Models.Event")
                        .WithMany("Teams")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("Planner.Models.TeamAffiliation", b =>
                {
                    b.HasOne("Planner.Models.TeamRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Planner.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("Planner.Models.User", "User")
                        .WithMany("TeamAffiliations")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
